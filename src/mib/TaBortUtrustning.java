/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mib;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 *
 * @author Josanna, Linda & Lisa
 */
public class TaBortUtrustning extends javax.swing.JFrame {

    private InfDB idb;
    private String anvId;
    private String anvTyp;
    ArrayList<String> vapenLista;
    ArrayList<String> teknikLista;
    ArrayList<String> kommunikationsLista;

    /**
     * Creates new form TaBortUtrustning
     */
    public TaBortUtrustning(InfDB idb, String anvId, String anvTyp) {
        initComponents();
        this.idb = idb;
        this.anvId = anvId;
        this.anvTyp = anvTyp;
        lblInfo.setVisible(false);
        txtSpec.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        lblRubrik = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        lblID = new javax.swing.JLabel();
        lblBenamning = new javax.swing.JLabel();
        txtBenamning = new javax.swing.JTextField();
        lblUtrustning = new javax.swing.JLabel();
        lblInfo = new javax.swing.JLabel();
        txtTyp = new javax.swing.JTextField();
        txtSpec = new javax.swing.JTextField();
        btnRadera = new javax.swing.JButton();
        btnSok = new javax.swing.JButton();
        btnTillbaka = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuStartsida = new javax.swing.JMenu();
        menuInlogg = new javax.swing.JMenu();
        menuLoggaUt = new javax.swing.JMenu();

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblRubrik.setFont(new java.awt.Font("Hiragino Maru Gothic ProN", 1, 24)); // NOI18N
        lblRubrik.setText("RADERA UTRUSTNING");

        lblID.setText("Utrustnings-ID");

        lblBenamning.setText("Benämning");

        txtBenamning.setText("-");

        lblUtrustning.setText("Utrustningstyp");

        lblInfo.setText("-");

        txtTyp.setText("-");

        btnRadera.setForeground(new java.awt.Color(255, 0, 0));
        btnRadera.setText("Radera");
        btnRadera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRaderaActionPerformed(evt);
            }
        });

        btnSok.setText("Sök");
        btnSok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSokActionPerformed(evt);
            }
        });

        btnTillbaka.setText("Tillbaka");
        btnTillbaka.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTillbakaActionPerformed(evt);
            }
        });

        menuStartsida.setText("Gå till startsida");
        menuStartsida.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuStartsidaMouseClicked(evt);
            }
        });
        jMenuBar1.add(menuStartsida);

        menuInlogg.setText("                                                                                                                                                   Inloggad som Admin");
        jMenuBar1.add(menuInlogg);

        menuLoggaUt.setText("Logga ut");
        menuLoggaUt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuLoggaUtMouseClicked(evt);
            }
        });
        jMenuBar1.add(menuLoggaUt);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnTillbaka)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(246, 246, 246)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblRubrik)
                        .addGap(0, 271, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblID)
                                    .addComponent(lblBenamning)
                                    .addComponent(lblUtrustning)
                                    .addComponent(lblInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(52, 52, 52)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtTyp, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtID, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                                    .addComponent(txtBenamning, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtSpec))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSok))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(88, 88, 88)
                                .addComponent(btnRadera)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(63, Short.MAX_VALUE)
                .addComponent(lblRubrik)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblID)
                    .addComponent(btnSok))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBenamning)
                    .addComponent(txtBenamning, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUtrustning)
                    .addComponent(txtTyp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblInfo)
                    .addComponent(txtSpec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addComponent(btnRadera)
                .addGap(3, 3, 3)
                .addComponent(btnTillbaka)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Sökning
    private void btnSokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSokActionPerformed
        // Kontrollerar om fältet för ID är ifyllt samt att det endast består av siffror. 
        if (Validering.textFaltHarVarde(txtID)) {
            if (Validering.txtFaltHarSiffror(txtID)) {

                try {
                    // Fyller på listorna med utrustningsID från utrustningstabellerna. 
                    vapenLista = idb.fetchColumn("SELECT Utrustnings_ID FROM Vapen ORDER BY Utrustnings_ID");
                    teknikLista = idb.fetchColumn("SELECT Utrustnings_ID FROM Teknik ORDER BY Utrustnings_ID");
                    kommunikationsLista = idb.fetchColumn("SELECT Utrustnings_ID FROM Kommunikation ORDER BY Utrustnings_ID");

                    // Hämtar information från sökfältet. 
                    String soktID = txtID.getText();
                    int soktIDint = Integer.parseInt(soktID);

                    // Hämtar information från från namnfältet. 
                    String benamning = idb.fetchSingle("SELECT Benamning FROM Utrustning WHERE Utrustnings_ID=" + soktIDint + "");
                    txtBenamning.setText(benamning);

                    // Villkorssatser för att hämta information från utrustningstabellerna. 
                    if (vapenLista.contains(soktID)) {
                        // Sätter rubrik och textfält synligt för användaren. Rubriken får namnet som utrustningens egenskap.
                        lblInfo.setVisible(true);
                        lblInfo.setText("Kaliber");
                        txtSpec.setVisible(true);
                        // Hämtar information om utrustningens egenskap.
                        String vapenKaliber = idb.fetchSingle("SELECT Kaliber FROM Vapen WHERE Utrustnings_ID=" + soktIDint + "");
                        txtSpec.setText(vapenKaliber);
                        txtTyp.setText("Vapen");
                    } else if (teknikLista.contains(soktID)) {
                        // Sätter rubrik och textfält synligt för användaren. Rubriken får namnet som utrustningens egenskap.
                        lblInfo.setVisible(true);
                        lblInfo.setText("Kraftkälla");
                        txtSpec.setVisible(true);
                        // Hämtar information om utrustningens egenskap.
                        String kraftkalla = idb.fetchSingle("SELECT Kraftkalla FROM Teknik WHERE Utrustnings_ID=" + soktIDint + "");
                        txtSpec.setText(kraftkalla);
                        txtTyp.setText("Teknik");
                    } else if (kommunikationsLista.contains(soktID)) {
                        // Sätter rubrik och textfält synligt för användaren. Rubriken får namnet som utrustningens egenskap.
                        lblInfo.setVisible(true);
                        lblInfo.setText("Överföringsteknik");
                        txtSpec.setVisible(true);
                        // Hämtar information om utrustningens egenskap.
                        String overforingsTeknik = idb.fetchSingle("SELECT Overforingsteknik FROM Kommunikation WHERE Utrustnings_ID=" + soktIDint + "");
                        txtSpec.setText(overforingsTeknik);
                        txtTyp.setText("Kommunikation");
                    }
                    // Visar information om att något inte fungerar. 
                } catch (InfException e) {
                    JOptionPane.showMessageDialog(null, "Något gick fel!");
                    System.out.println("Internt felmeddelande:" + e.getMessage());
                }
            }
            // Visar information om att alla fält måste ha ett värden. 
        } else {
            JOptionPane.showMessageDialog(null, "Alla fält måste vara ifyllda!");
        }
    }//GEN-LAST:event_btnSokActionPerformed

    // Radera
    private void btnRaderaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRaderaActionPerformed

        // Här kontrollerar man att fältet txtSokID är ifyllt innan man går vidare och raderar informationen. 
        if (Validering.textFaltHarVarde(txtID)) {

            // Om txtSokID är ifyllt sker en dubbelkontroll för om man verkligen vill radera informationen. Detta görs med metoden showConfirmDialog. 
            int input = JOptionPane.showConfirmDialog(null, "Är du säker på att du vill ta bort vald utrustning?", "Ta bort utrustning..", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            // Metoden använder 0 och 1 som input på svar. 0 = ja. Om detta väljs så går metoden vidare och raderar informationen. 
            if (input == 0) {
                try {
                    String soktID = txtID.getText();

                    // För att kunna kontrollera vilken tabell som sökt ID finns inom (Utrustningstyp) används tre ArrayLists där man lagrar information om värdena. 
                    vapenLista = idb.fetchColumn("SELECT Utrustnings_ID FROM Vapen ORDER BY Utrustnings_ID");
                    teknikLista = idb.fetchColumn("SELECT Utrustnings_ID FROM Teknik ORDER BY Utrustnings_ID");
                    kommunikationsLista = idb.fetchColumn("SELECT Utrustnings_ID FROM Kommunikation ORDER BY Utrustnings_ID");

                    // Beroende på vilken tabell som används raderas värdena baserat på sökt ID. 
                    if (vapenLista.contains(soktID)) {
                        idb.delete("DELETE FROM Innehar_utrustning WHERE Utrustnings_ID = " + soktID + "");
                        idb.delete("DELETE FROM Vapen WHERE Utrustnings_ID = " + soktID + "");
                    } else if (teknikLista.contains(soktID)) {
                        idb.delete("DELETE FROM Innehar_utrustning WHERE Utrustnings_ID = " + soktID + "");
                        idb.delete("DELETE FROM Teknik WHERE Utrustnings_ID = " + soktID + "");

                    } else if (kommunikationsLista.contains(soktID)) {
                        idb.delete("DELETE FROM Innehar_utrustning WHERE Utrustnings_ID = " + soktID + "");
                        idb.delete("DELETE FROM Kommunikation WHERE Utrustnings_ID = " + soktID + "");

                    }

                    idb.delete("DELETE FROM Utrustning WHERE Utrustnings_ID =" + soktID + "");

                    // Skickar tillbaka användaren till tidigare sida.
                    btnTillbakaActionPerformed(evt);

                } // Visar felmeddelande om att något har gått fel. 
                catch (InfException e) {
                    JOptionPane.showMessageDialog(null, "Något gick fel!");
                    System.out.println("Internt felmeddelande" + e.getMessage());
                }
            }
        } // Visar information om att ID behöver vara ifyllt.  
        else {
            JOptionPane.showMessageDialog(null, "UtrustningsID måste vara ifyllt!");
        }


    }//GEN-LAST:event_btnRaderaActionPerformed

    //Metoden gör nuvarande fönster osynligt och öppnar klassen Inloggning i nytt fönster. Denna metod gör så att man blir utloggad.
    private void menuLoggaUtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuLoggaUtMouseClicked
        setVisible(false);
        Inloggning inlogg = new Inloggning(idb);
        inlogg.setVisible(true);
    }//GEN-LAST:event_menuLoggaUtMouseClicked

    // Metoden gör nuvarande fönster osynligt och öppnar klassen StartsidaAdmin i nytt fönster.
    private void menuStartsidaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuStartsidaMouseClicked
        setVisible(false);
        StartsidaAdmin startAdm = new StartsidaAdmin(idb, anvId, anvTyp);
        startAdm.setVisible(true);
    }//GEN-LAST:event_menuStartsidaMouseClicked
    // Metoden gör nuvarande fönster osynligt och öppnar klassen HanteraUtrustningAdmin i nytt fönster.
    private void btnTillbakaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTillbakaActionPerformed
        setVisible(false);
        HanteraUtrustningAdmin hantUtr = new HanteraUtrustningAdmin(idb, anvId, anvTyp);
        hantUtr.setVisible(true);
    }//GEN-LAST:event_btnTillbakaActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRadera;
    private javax.swing.JButton btnSok;
    private javax.swing.JButton btnTillbaka;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JLabel lblBenamning;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblInfo;
    private javax.swing.JLabel lblRubrik;
    private javax.swing.JLabel lblUtrustning;
    private javax.swing.JMenu menuInlogg;
    private javax.swing.JMenu menuLoggaUt;
    private javax.swing.JMenu menuStartsida;
    private javax.swing.JTextField txtBenamning;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtSpec;
    private javax.swing.JTextField txtTyp;
    // End of variables declaration//GEN-END:variables
}
